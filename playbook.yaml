---
# tested at ansible 2.5.1

- name: Install Docker to Build and Run nodes
  hosts:
    - build
    - run
  become: yes

  tasks:
    - name: Ensure Docker is installed
      apt:
        name:
          - docker.io
          - python-docker
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started


- name: Build node
  hosts: build
  become: yes
  vars:
    git_repo: https://github.com/boxfuse/boxfuse-sample-java-war-hello.git
    artifact: hello-1.0.war
    app_image: atercat/myboxfuse:tomcat


  tasks:
    - name: Ensure artifact directory exists
      file:
        path: /war
        state: directory
    
    - name: Ensure previously built artifact is absent
      file:
        path: "/war/{{ artifact }}"
        state: absent

    - name: Create build container
      docker_container:
        name: build
        state: started
        image: maven:3.6-alpine
        volumes:
          - /war:/war
        command: >
          /bin/bash -c "apk update
          && apk add git
          && git clone {{ git_repo }} git
          && mvn -f /git/pom.xml package
          && cp /git/target/{{ artifact }} /war/"
        recreate: yes
        detach: no
        cleanup: yes
    
    - name: Ensure newly built artifact is present
      file:
        path: "/war/{{ artifact }}"
    
    - name: Copy Dockerfile to Buildnode
      copy:
        src: Dockerfile
        dest: /war/

      # Run playbook with --extra-vars "@file_name.json" parameter.
      # Look at the docker_login.json example.
    - name: Login to Dockerhub
      docker_login:
        username: "{{ docker_login }}"
        password: "{{ docker_password }}"
        email: "{{ docker_email }}"

    - name: Build production image and push it to Dockerhub
      docker_image:
        name: "{{ app_image }}"
        path: /war
        buildargs:
          artifact: "{{ artifact }}"
        push: yes


- name: Run node
  hosts: run
  become: yes
  vars:
    app_image: atercat/myboxfuse:tomcat

  tasks:
    - name: Run app container at production server
      docker_container:
        name: run
        state: started
        image: "{{ app_image }}"
        ports: "8080:8080"
        recreate: yes
---